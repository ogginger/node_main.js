define("Functions/bIsObjectEqual",[],function(){function t(t,e){var n=JSON.stringify(t),s=JSON.stringify(e),o=!0;if(n.length==s.length)for(var i=0;i<n.length;i++)n[i]!==s[i]&&(o=!1);else o=!1;return o}return t}),define("Functions/log",["jquery","underscore"],function(t,e){return function(t,e){void 0===e&&(e=!0),!0===e&&console.log(t)}}),define("TestSuite",["jquery","underscore","backbone","rsvp","Functions/bIsObjectEqual","Functions/log"],function(t,e,n,s,o,i){return n.Model.extend({defaults:{MethodUnderTest:null,TestCollection:[],AsyncTestCollection:[],Debug:!0},xAddTest:function(t){var e=this;return e.get("TestCollection").push(e.xGenerateTest(t)),e},xAddAsyncTest:function(t){var e=this;return e.get("AsyncTestCollection").push(e.xGenerateAsyncTest(t)),e},xGenerateAsyncTest:function(t){if(!1===e.has(t,"Name"))throw{message:"Test did not have a Name."};if(!1===e.has(t,"Input"))throw{message:"Test did not have an Input."};if(!1===e.has(t,"Function"))throw{message:"Test did not have a Function."};if(!1===e.has(t,"ExpectedOutput"))throw{message:"Test did not have an ExpectedOutput."};if(!1===e.isFunction(t.Function))throw{message:"Test Function was not a function."};if(!1===e.isString(t.Name))throw{message:"Test Name was not a string."};!0===e.isFunction(t.Input)&&(t.Input=t.Input());var n=!1;if(!0===e.has(t,"ComparisonFunction")){if(!0!==e.isFunction(t.ComparisonFunction))throw{message:"Test Comparison Function was not a function."};n=!0}var r=!1,a=!1;if(e.has(t,"Comparator")){if("object"!=typeof t.Comparator)throw{message:"The Comparator was not an object."};!0===t.Comparator.Debug&&(r=!0),!0===t.Comparator.Object&&(a=!0)}var u=t.ExpectedOutput;return!1===n?function(){return new s.Promise(function(e){t.Function(t.Input).then(function(n){var s=!1;!0===a?(i("Result: "+JSON.stringify(n),r),i("Expected: "+JSON.stringify(u),r),!0===o(n,u)&&(s=!0)):(i("Result: "+n,r),i("Expected: "+u,r),n===u&&(s=!0)),!0===s?e(!0):(i("UnitTest: "+t.Name+"() - Failed!"),e(!1))})})}:function(){return new s.Promise(function(e){t.Function(t.Input).then(function(n){t.ComparisonFunction(n,t.ExpectedOutput).then(function(t){e(t)})})})}},xGenerateTest:function(t){if(!1===e.has(t,"Name"))throw{message:"Test did not have a Name."};if(!1===e.has(t,"Input"))throw{message:"Test did not have an Input."};if(!1===e.has(t,"Function"))throw{message:"Test did not have a Function."};if(!1===e.has(t,"ExpectedOutput"))throw{message:"Test did not have an ExpectedOutput."};if(!1===e.isFunction(t.Function))throw{message:"Test Function was not a function."};if(!1===e.isString(t.Name))throw{message:"Test Name was not a string."};!0===e.isFunction(t.Input)&&(t.Input=t.Input());var n=!1;if(!0===e.has(t,"ComparisonFunction")){if(!0!==e.isFunction(t.ComparisonFunction))throw{message:"Test Comparison Function was not a function."};n=!0}var s=!1,r=!1;if(e.has(t,"Comparator")){if("object"!=typeof t.Comparator)throw{message:"The Comparator was not an object."};!0===t.Comparator.Debug&&(s=!0),!0===t.Comparator.Object&&(r=!0)}var a=t.Function(t.Input),u=t.ExpectedOutput;return!1===n?function(){var e=!1;return!0===r?(i("Result: "+JSON.stringify(a),s),i("Expected: "+JSON.stringify(u),s),!0===o(a,u)&&(e=!0)):(i("Result: "+a,s),i("Expected: "+u,s),a===u&&(e=!0)),!0===e||(i("UnitTest: "+t.Name+"() - Failed!"),!1)}:function(){return t.ComparisonFunction(a,u)}},bTestAllAsync:function(){var t=this;return i("test_"+t.get("MethodUnderTest")+": Is running async tests...",t.get("Debug")),new s.Promise(function(n,o){if(!0===e.isEmpty(t.get("AsyncTestCollection")))o({message:"Error: No async tests to test."});else{var r=e.map(t.get("AsyncTestCollection"),function(t){return t()});s.allSettled(r).then(function(s){!0===e.every(s,function(t){return"fulfilled"===t.state&&!0===t.value})?(i("test_"+t.get("MethodUnderTest")+": All tests passed!",t.get("Debug")),n(!0)):(i("test_"+t.get("MethodUnderTest")+": Not all tests passed!",t.get("Debug")),n(!1))})}})},bTestAll:function(){var t=this;if(i("test_"+t.get("MethodUnderTest")+": Is running synchronous tests...",t.get("Debug")),e.isNull(t.get("TestCollection"))||e.isEmpty(t.get("TestCollection")))throw{message:"test_"+t.get("MethodUnderTest")+": Has no synchronous tests to test."};return!0===e.every(t.get("TestCollection"),function(t){return t()})?(i("test_"+t.get("MethodUnderTest")+": All tests passed!",t.get("Debug")),!0):(i("test_"+t.get("MethodUnderTest")+": Not all tests passed!",t.get("Debug")),!1)},bTest:function(){var t=this;return i("test_"+t.get("MethodUnderTest")+" is running tests.",t.get("Debug")),new s.Promise(function(n,s){var o=t.get("Debug"),r=t.get("TestCollection"),a=t.get("AsyncTestCollection");i(["TestCollection:",r],o),i(["AsyncTestCollection:",a],o);var u=e.isEmpty(r),c=e.isEmpty(a);if(i("EmptyTestCollection: "+u,o),i("EmptyAsyncTestCollection: "+c,o),!0===c&&!0===u)i("Error: There are no tests to test.",t.get("Debug")),s({message:"Error: There are no tests to test."});else if(!1===c&&!1===u)t.bTestAllAsync().then(function(e){if(!0===e){!0===t.bTestAll()?n(!0):(i("test_"+t.get("MethodUnderTest")+": Not all tests in the Synchronous Test Collection passed.",o),n(!1))}else i("test_"+t.get("MethodUnderTest")+": Not all tests in the Async Test Collection passed.",t.get("Debug"),o),n(!1)});else if(!1===c)t.bTestAllAsync().then(function(e){!0===e?n(!0):(i("test_"+t.get("MethodUnderTest")+": Not all tests in the Async Test Collection passed.",o),n(!1))});else{var l=t.bTestAll();!0===l?n(!0):(i("test_"+t.get("MethodUnderTest")+": Not all tests in the Synchronous Test Collection passed.",o),n(!1))}})},add:function(t){var n=this;!0===e.has(t,"Async")?!0===t.Async&&n.xAddAsyncTest(t):n.xAddTest(t)},test:function(t){var e=this;if(void 0===t)e.bTest().catch(function(t){i("Error:"+JSON.stringify(t))});else if("Synchronous"===t)try{e.bTestAll()}catch(t){i("Error: "+JSON.stringify(t))}else"Asynchronous"===t&&e.bTestAllAsync().catch(function(t){i(t)})}})});